import { Signal } from "@preact/signals";
import { createEventsServicePlugin } from "@schedule-x/event-recurrence";
import { CalendarAppSingleton, CalendarEvent, EventModalPlugin, CalendarEventInternal } from "@schedule-x/shared";
type FormValues = {
    start: string;
    end: string;
    title?: string | undefined;
    description?: string | undefined;
    location?: string | undefined;
    people?: string[];
    calendarId?: string | undefined;
    rrule?: string | undefined;
    resourceId?: string | undefined;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    [key: string]: any;
};
type ModalState = "view" | "edit" | "add" | "edit_added" // for when the plugin adds an event, and opens the edit modal right away to edit it
 | "delete";
type SelectItem = {
    label: string;
    value: string;
};
type ValidationResult = {
    isValid: boolean;
    message?: string;
};
type InputField<T extends undefined | string | string[]> = {
    label?: string;
    name?: string;
    onChange?: (value: T) => void;
};
type InputFieldWithValidation<T extends undefined | string | string[]> = InputField<T> & {
    validator?: (fieldValue: T) => ValidationResult;
};
type CustomInputFieldConfig<T extends undefined | string | string[]> = InputFieldWithValidation<T> & {
    type: "text" | "select" | "textarea" | "combobox";
    items?: SelectItem[];
};
type CustomInputField<T extends undefined | string | string[]> = CustomInputFieldConfig<T> & {
    rerender: () => void;
};
interface EventModalConfig {
    eventsService: ReturnType<typeof createEventsServicePlugin>;
    availablePeople?: string[];
    onAddEvent?: (event: CalendarEvent) => void;
    onDeleteEvent?: (id: string | number) => void;
    canOpenModal?: (event: CalendarEvent) => boolean;
    fields?: {
        title?: InputFieldWithValidation<string | undefined>;
        description?: InputFieldWithValidation<string | undefined>;
        startDate?: InputField<string>;
        startTime?: InputField<string>;
        endDate?: InputField<string>;
        endTime?: InputField<string>;
        rruleFrequency?: InputField<string>;
        rruleUntil?: InputField<string>;
        people?: InputFieldWithValidation<string[] | undefined>;
        calendarId?: InputFieldWithValidation<string | undefined>;
        resourceId?: InputFieldWithValidation<string | undefined>;
    };
    datePicker?: {
        min?: string;
        max?: string;
    };
    customFields?: {
        [fieldName: string]: Signal<CustomInputField<string | string[] | undefined>>;
    };
    onStartUpdate?: (start: string) => void;
    onEndUpdate?: (end: string) => void;
    has12HourTimeFormat?: boolean;
    movable?: boolean;
}
interface InteractiveEventModalPlugin extends EventModalPlugin {
    config: EventModalConfig;
    formValues: Signal<FormValues>;
    formValidationErrors: Record</** fieldName */ string, /** errorMessage */ Signal<string | undefined>>;
    modalState: Signal<ModalState>;
    eventsService: ReturnType<typeof createEventsServicePlugin>;
    isEditingRecurringEvent: Signal<boolean>;
    openEventCreationModal: (id: string | number, start?: string, otherEventProperties?: Partial<CalendarEvent>) => void;
    clickToCreate: (start: string, otherEventProperties?: Partial<CalendarEvent>) => void;
    idFactory?: () => string | number;
    close: () => void;
    name: string;
    init?($app: CalendarAppSingleton): void;
    isOpen: Signal<boolean>;
}
declare const createInputField: <T extends undefined | string | string[]>(field: CustomInputFieldConfig<T>) => Signal<CustomInputField<T>>;
declare function InteractiveEventModal({ $app }: {
    $app: CalendarAppSingleton;
}): import("preact").JSX.Element;
declare const createInteractiveEventModal: (config: EventModalConfig) => {
    config: EventModalConfig;
    calendarEventElement: Signal<HTMLElement | null>;
    name: string;
    beforeRender($app: CalendarAppSingleton): void;
    calendarEvent: Signal<CalendarEventInternal | null>;
    calendarEventDOMRect: Signal<DOMRect | null>;
    ComponentFn: typeof InteractiveEventModal;
    setCalendarEvent: (event: CalendarEventInternal, eventTargetDOMRect: DOMRect) => void;
    formValues: Signal<FormValues>;
    formValidationErrors: Record<string, Signal<string | undefined>>;
    modalState: Signal<ModalState>;
    eventsService: {
        name: string;
        $app: CalendarAppSingleton;
        eventsFacade: EventsFacade;
        beforeRender($app: CalendarAppSingleton): void;
        add(event: CalendarEventExternal): void;
        update(event: CalendarEventExternal): void;
        remove(eventId: string | number): void;
        get(eventId: string | number): CalendarEventExternal | undefined;
        getAll(): CalendarEventExternal[];
        set(events: CalendarEventExternal[]): void;
        throwNotInitializedError: any;
        setBackgroundEvents(backgroundEvents: {
            start: string;
            end: string;
            style: import("preact").JSX.CSSProperties;
            title?: string;
        }[]): void;
    } & {
        name: "eventsService";
    };
    isEditingRecurringEvent: Signal<boolean>;
    openEventCreationModal: (id: string | number, start?: string, otherEventProperties?: {}) => void;
    clickToCreate(start: string, otherEventProperties?: {}): void;
    close: () => void;
    isOpen: Signal<boolean>;
} & {
    name: "eventModal";
};
export { createInputField, createInteractiveEventModal };
export type { InteractiveEventModalPlugin };
