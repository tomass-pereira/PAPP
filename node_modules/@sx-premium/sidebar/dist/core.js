import { jsx, jsxs, Fragment as Fragment$1 } from 'preact/jsx-runtime';
import { useState, useEffect } from 'preact/hooks';
import { Fragment, render, createElement } from 'preact';
import { useState as useState$1, useEffect as useEffect$1, Fragment as Fragment$2 } from 'preact/compat';
import { signal, effect } from '@preact/signals';

function AppButton({ onClick, children, additionalClasses, }) {
    return (jsx("button", { className: 'sx__app-button' + (additionalClasses ? ` ${additionalClasses}` : ''), onClick: onClick, children: children }));
}

const definePlugin = (name, definition) => {
    definition.name = name;
    return definition;
};

var WeekDay;
(function (WeekDay) {
    WeekDay[WeekDay["SUNDAY"] = 0] = "SUNDAY";
    WeekDay[WeekDay["MONDAY"] = 1] = "MONDAY";
    WeekDay[WeekDay["TUESDAY"] = 2] = "TUESDAY";
    WeekDay[WeekDay["WEDNESDAY"] = 3] = "WEDNESDAY";
    WeekDay[WeekDay["THURSDAY"] = 4] = "THURSDAY";
    WeekDay[WeekDay["FRIDAY"] = 5] = "FRIDAY";
    WeekDay[WeekDay["SATURDAY"] = 6] = "SATURDAY";
})(WeekDay || (WeekDay = {}));

WeekDay.MONDAY;

const concatenatePeople = (people) => {
    return people.reduce((acc, person, index) => {
        if (index === 0)
            return person;
        if (index === people.length - 1)
            return `${acc} & ${person}`;
        return `${acc}, ${person}`;
    }, '');
};

/**
 * Can be used for generating a random id for an entity
 * Should, however, never be used in potentially resource intense loops,
 * since the performance cost of this compared to new Date().getTime() is ca x4 in v8
 * */
const randomStringId = () => 's' + Math.random().toString(36).substring(2, 11);

function AppCheckbox({ initialValue, label, onChange, colorPrimary }) {
    const checkboxId = randomStringId();
    const [isChecked, setIsChecked] = useState(initialValue || false);
    const [isReady, setIsReady] = useState(!colorPrimary);
    const handleOnInput = (event) => {
        setIsChecked(event.target.checked);
        onChange(event.target.checked);
    };
    useEffect(() => {
        const el = document.getElementById(checkboxId);
        if (!el)
            return;
        if (colorPrimary) {
            el.style.setProperty('--sx-color-primary', colorPrimary);
            setIsReady(true);
        }
    }, []);
    return (jsx(Fragment, { children: jsx("label", { id: checkboxId, className: "sx__app-checkbox", children: isReady && (jsxs(Fragment$1, { children: [jsx("input", { type: "checkbox", checked: isChecked, onInput: handleOnInput }), jsx("span", { children: label })] })) }) }));
}

function Chevron({ direction, onClick, buttonText, disabled = false, title, additionalClasses, }) {
    return (jsx("button", { disabled: disabled, className: `sx__chevron-wrapper sx__ripple` + (additionalClasses ? ` ${additionalClasses}` : ''), onClick: onClick, tabIndex: 0, title: title, children: jsx("i", { className: `sx__chevron sx__chevron--${direction}`, children: buttonText }) }));
}

const SX_INTERNAL_CALENDAR = '__SX-INTERNAL__';

const useIconColors = ($app) => {
    const ICON_COLOR_LIGHT_MODE = '#000';
    const ICON_COLOR_DARK_MODE = 'var(--sx-color-neutral-variant)';
    const iconColor = signal($app.calendarState.isDark.value
        ? ICON_COLOR_DARK_MODE
        : ICON_COLOR_LIGHT_MODE);
    effect(() => {
        if ($app.calendarState.isDark.value)
            iconColor.value = ICON_COLOR_DARK_MODE;
        else
            iconColor.value = ICON_COLOR_LIGHT_MODE;
    });
    return iconColor;
};

function AppSidebar(props) {
    var _a, _b, _c, _d, _e;
    const modalPlugin = (_a = props.$app.config) === null || _a === void 0 ? void 0 : _a.plugins['eventModal'];
    const [activeCalendars, setActiveCalendars] = useState$1(props.activeCalendarIds
        ? [...props.activeCalendarIds, SX_INTERNAL_CALENDAR]
        : [SX_INTERNAL_CALENDAR]);
    const dragToCreatePlugin = (_b = props.$app.config) === null || _b === void 0 ? void 0 : _b.plugins['dragToCreate'];
    const iconColor = useIconColors(props.$app);
    const openAddEvent = () => {
        if (!modalPlugin)
            return console.error('No modal plugin found');
        if (modalPlugin.calendarEvent.value)
            return // don't try to open a new modal if one is already open
            ;
        modalPlugin.openEventCreationModal(modalPlugin.idFactory ? modalPlugin.idFactory() : randomStringId());
    };
    const hasCalendars = !!props.$app.config.calendars.value;
    const isDark = props.$app.calendarState.isDark.value;
    const toggleCalendar = (calendarId, isChecked) => {
        if (isChecked) {
            setActiveCalendars(Array.from(new Set([...activeCalendars, calendarId])));
        }
        else {
            setActiveCalendars(activeCalendars.filter((id) => id !== calendarId));
        }
    };
    useEffect$1(() => {
        props.$app.calendarEvents.filterPredicate.value = (event) => {
            if (!event.calendarId)
                return false;
            return activeCalendars.includes(event.calendarId);
        };
    }, [activeCalendars]);
    const [isSidebarOpen, setIsSidebarOpen] = useState$1(typeof props.openOnRender === 'boolean' ? props.openOnRender : true);
    const [wrapperClasses, setWrapperClasses] = useState$1([
        'sx__sidebar-inner',
        isSidebarOpen ? 'is-open' : 'is-closed',
    ]);
    useEffect$1(() => {
        setWrapperClasses([
            'sx__sidebar-inner',
            isSidebarOpen ? 'is-open' : 'is-closed',
        ]);
    }, [isSidebarOpen]);
    const handleDragStartPlaceholder = (event) => {
        dragToCreatePlugin === null || dragToCreatePlugin === void 0 ? void 0 : dragToCreatePlugin.dragToCreate(props.idFactory ? props.idFactory() : randomStringId(), event);
    };
    const getStylesFromEventData = (event) => {
        var _a, _b, _c;
        const selectedCalendar = props.$app.config.calendars.value[event.calendarId];
        return {
            color: selectedCalendar
                ? (_a = selectedCalendar.lightColors) === null || _a === void 0 ? void 0 : _a.onContainer
                : 'var(--sx-color-on-primary-container)',
            backgroundColor: selectedCalendar
                ? (_b = selectedCalendar.lightColors) === null || _b === void 0 ? void 0 : _b.container
                : 'var(--sx-color-primary-container)',
            borderLeft: selectedCalendar
                ? `4px solid ${(_c = selectedCalendar.lightColors) === null || _c === void 0 ? void 0 : _c.main}`
                : '4px solid var(--sx-color-primary-main)',
        };
    };
    const filterPlaceholderEvents = (placeholderEvent) => {
        return activeCalendars.includes(placeholderEvent.calendarId || '');
    };
    console.log(dragToCreatePlugin);
    console.log(props.placeholderEvents);
    console.log((_c = props.placeholderEvents) === null || _c === void 0 ? void 0 : _c.filter(filterPlaceholderEvents));
    return (jsxs(Fragment$2, { children: [jsx("div", { class: "sx__sidebar-inner-wrapper", children: jsxs("div", { class: wrapperClasses.join(' '), children: [jsx(AppButton, { onClick: openAddEvent, additionalClasses: 'sx__app-button-filled is-full-width sx__add-event-button', children: "Add event" }), props.hasCalendarToggles && (jsxs("section", { className: "sx__sidebar-section", children: [jsx("h3", { className: "sx__sidebar-section-heading", children: "Calendars" }), jsx("ul", { className: "sx__calendar-toggles", children: hasCalendars &&
                                        Object.entries(props.$app.config.calendars.value).map(([calendarId, calendar]) => {
                                            var _a, _b;
                                            return (jsx("li", { class: "sx__calendar-toggle", children: jsx(AppCheckbox, { onChange: (value) => toggleCalendar(calendarId, value), label: calendar.label || '', colorPrimary: isDark
                                                        ? (_a = calendar.darkColors) === null || _a === void 0 ? void 0 : _a.main
                                                        : (_b = calendar.lightColors) === null || _b === void 0 ? void 0 : _b.main, initialValue: activeCalendars.includes(calendarId) }) }, calendarId));
                                        }) })] })), dragToCreatePlugin &&
                            !!((_d = props.placeholderEvents) === null || _d === void 0 ? void 0 : _d.filter(filterPlaceholderEvents).length) && (jsx(Fragment$1, { children: jsxs("section", { className: "sx__sidebar-section sx__drag-to-create-section", children: [jsxs("h3", { className: "sx__sidebar-section-heading", children: [jsxs("svg", { width: 22, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [jsx("g", { id: "SVGRepo_bgCarrier", "stroke-width": "0" }), jsx("g", { id: "SVGRepo_tracerCarrier", "stroke-linecap": "round", "stroke-linejoin": "round" }), jsx("g", { id: "SVGRepo_iconCarrier", children: jsx("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M11.2071 5.6797C11.0909 5.85386 11 6.14834 11 6.5V7V8C11 8.55228 10.5523 9 10 9C9.44772 9 9 8.55228 9 8V7C9 6.64834 8.90906 6.35386 8.79295 6.1797C8.6966 6.03518 8.61209 6 8.5 6C8.38791 6 8.3034 6.03518 8.20705 6.1797C8.09094 6.35386 8 6.64834 8 7V10V12C8 12.5523 7.55228 13 7 13C6.44772 13 6 12.5523 6 12V10C6 9.64834 5.90906 9.35386 5.79295 9.1797C5.6966 9.03518 5.61209 9 5.5 9C5.38791 9 5.3034 9.03518 5.20705 9.1797C5.09094 9.35386 5 9.64834 5 10V14C5 15.033 5.70057 16.1402 7.0547 17.0429C8.3875 17.9315 10.1939 18.5 12 18.5C15.6675 18.5 18 16.251 18 14V8.5C18 8.14834 17.9091 7.85386 17.7929 7.6797C17.6966 7.53518 17.6121 7.5 17.5 7.5C17.3879 7.5 17.3034 7.53518 17.2071 7.6797C17.0909 7.85386 17 8.14834 17 8.5V9C17 9.55228 16.5523 10 16 10C15.4477 10 15 9.55228 15 9V8.5V7C15 6.64834 14.9091 6.35386 14.7929 6.1797C14.6966 6.03518 14.6121 6 14.5 6C14.3879 6 14.3034 6.03518 14.2071 6.1797C14.0909 6.35386 14 6.64834 14 7V8.5C14 9.05228 13.5523 9.5 13 9.5C12.4477 9.5 12 9.05228 12 8.5V7V6.5C12 6.14834 11.9091 5.85386 11.7929 5.6797C11.6966 5.53518 11.6121 5.5 11.5 5.5C11.3879 5.5 11.3034 5.53518 11.2071 5.6797ZM13.2855 4.34094C13.6245 4.12954 14.0313 4 14.5 4C15.3879 4 16.0534 4.46482 16.4571 5.0703C16.573 5.24423 16.6684 5.42998 16.7452 5.62242C16.975 5.54395 17.227 5.5 17.5 5.5C18.3879 5.5 19.0534 5.96482 19.4571 6.5703C19.8409 7.14614 20 7.85166 20 8.5V14C20 17.749 16.3325 20.5 12 20.5C9.80613 20.5 7.6125 19.8185 5.9453 18.7071C4.29943 17.6098 3 15.967 3 14V10C3 9.35166 3.15906 8.64614 3.54295 8.0703C3.9466 7.46482 4.61209 7 5.5 7C5.67545 7 5.84222 7.01815 6 7.05195V7C6 6.35166 6.15906 5.64614 6.54295 5.0703C6.9466 4.46482 7.61209 4 8.5 4C8.96874 4 9.37549 4.12954 9.71446 4.34094C10.1243 3.85131 10.7281 3.5 11.5 3.5C12.2719 3.5 12.8757 3.85131 13.2855 4.34094Z", fill: "#6c6565" }) })] }), "Create"] }), (_e = props.placeholderEvents) === null || _e === void 0 ? void 0 : _e.filter(filterPlaceholderEvents).map((event) => (jsxs("div", { class: 'sx__sidebar__placeholder-event', style: getStylesFromEventData(event), draggable: true, onDragStart: () => handleDragStartPlaceholder(event), children: [event.title && (jsx("div", { class: 'sx__sidebar__placeholder-event__title', children: event.title })), event.people && event.people.length && (jsxs("div", { class: 'sx__sidebar__placeholder-event__people', children: [jsxs("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [jsx("g", { id: "SVGRepo_bgCarrier", "stroke-width": "0" }), jsx("g", { id: "SVGRepo_tracerCarrier", "stroke-linecap": "round", "stroke-linejoin": "round" }), jsxs("g", { id: "SVGRepo_iconCarrier", children: [jsx("path", { d: "M15 7C15 8.65685 13.6569 10 12 10C10.3431 10 9 8.65685 9 7C9 5.34315 10.3431 4 12 4C13.6569 4 15 5.34315 15 7Z", stroke: iconColor, "stroke-width": "2" }), jsx("path", { d: "M5 19.5C5 15.9101 7.91015 13 11.5 13H12.5C16.0899 13 19 15.9101 19 19.5V20C19 20.5523 18.5523 21 18 21H6C5.44772 21 5 20.5523 5 20V19.5Z", stroke: iconColor, "stroke-width": "2" })] })] }), concatenatePeople(event.people)] }))] })))] }) }))] }) }), jsx(Chevron, { title: 'Toggle sidebar', direction: isSidebarOpen ? 'previous' : 'next', onClick: () => setIsSidebarOpen(!isSidebarOpen), additionalClasses: 'sx__sidebar-toggle ' + (isSidebarOpen ? 'is-open' : '') })] }));
}

const createSidebarPlugin = (config) => {
    let $app;
    return definePlugin('sidebar', {
        name: 'sidebar',
        eventsService: config.eventsService,
        onRender(_$app) {
            $app = _$app;
            // render AppSidebar component as first child element of .sx__calendar-wrapper
            const calendarWrapper = document.querySelector('.sx__calendar-wrapper');
            if (!calendarWrapper)
                throw new Error('Calendar wrapper not found');
            const sidebar = document.createElement('div');
            sidebar.className = 'sx__sidebar';
            sidebar.id = randomStringId();
            calendarWrapper === null || calendarWrapper === void 0 ? void 0 : calendarWrapper.prepend(sidebar);
            render(createElement(AppSidebar, {
                $app,
                activeCalendarIds: config.activeCalendarIds,
                openOnRender: config.openOnRender,
                placeholderEvents: config.placeholderEvents,
                hasCalendarToggles: typeof config.hasCalendarToggles === 'boolean'
                    ? config.hasCalendarToggles
                    : true,
                idFactory: config.idFactory,
            }), sidebar);
        },
    });
};

export { createSidebarPlugin };
